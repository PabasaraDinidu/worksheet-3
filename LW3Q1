//abstract class
abstract class BorrowableItems {
    public abstract void displayInfo();
}


//Book class
class Book extends BorrowableItems {
    private String title;
    private String author;
    private String ISBN;
    private boolean available;

    public Book(String title, String author, String ISBN) {
        this.title = title;
        this.author = author;
        this.ISBN = ISBN;
        this.available = true; // Books are available by default
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getISBN() {
        return ISBN;
    }

    public boolean isAvailable() {
        return available;
    }

    public void setAvailable(boolean available) {
        this.available = available;
    }

    @Override
    public void displayInfo() {
        System.out.println("Title: " + title);
        System.out.println("Author: " + author);
        System.out.println("ISBN: " + ISBN);
        System.out.println("Available: " + (available ? "Yes" : "No"));
    }
}

//Person class
class Person {
    private String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}


//Student class
class Student extends Person {
    public Student(String name) {
        super(name);
    }
}

//Library class

import java.util.ArrayList;

class Library {
    private ArrayList<BorrowableItems> borrowableItemsList;

    public Library() {
        this.borrowableItemsList = new ArrayList<>();
    }

    public void addLibraryItem(BorrowableItems item) {
        borrowableItemsList.add(item);
    }

    public void checkoutItem(String title) {
        for (BorrowableItems item : borrowableItemsList) {
            if (item instanceof Book) {
                Book book = (Book) item;
                if (book.getTitle().equalsIgnoreCase(title) && book.isAvailable()) {
                    book.setAvailable(false);
                    System.out.println("Checked out: " + title);
                    return;
                }
            }
        }
        System.out.println("Item not found or already checked out.");
    }

    public void listAvailableItems() {
        System.out.println("Available Library Items:");
        for (BorrowableItems item : borrowableItemsList) {
            if (item instanceof Book) {
                Book book = (Book) item;
                if (book.isAvailable()) {
                    book.displayInfo();
                    System.out.println("-----------------");
                }
            }
        }
    }

    public void displayLibraryInfo() {
        int availableCount = 0;
        for (BorrowableItems item : borrowableItemsList) {
            if (item instanceof Book) {
                Book book = (Book) item;
                if (book.isAvailable()) {
                    availableCount++;
                }
            }
        }
        System.out.println("Total items: " + borrowableItemsList.size());
        System.out.println("Available items: " + availableCount);
    }
}

//Main class

public class LibrarySystem {
    public static void main(String[] args) {
        // Create library instance
        Library library = new Library();

        // Create book instances
        Book book1 = new Book("Seena Maragatham", "Sujatha Thilaka", "9789553023975");
        Book book2 = new Book("Nuramakadya Bauthika Nuladanayakshanamaala", "Seynamasasekaka", "9789553548721");
        Book book3 = new Book("Island of a Thousand Mirrors", "Nayomi Munaweera", "9781616953623");

        // Add books to library
        library.addLibraryItem(book1);
        library.addLibraryItem(book2);
        library.addLibraryItem(book3);

        // Display library information
        System.out.println("Library Information:");
        library.displayLibraryInfo();
        System.out.println();

        // List all available items
        System.out.println("Listing all available items:");
        library.listAvailableItems();
        System.out.println();

        // Check out "Island of a Thousand Mirrors"
        library.checkoutItem("Island of a Thousand Mirrors");
        System.out.println();

        // List available items after checkout
        System.out.println("Listing available items after checkout:");
        library.listAvailableItems();
    }
}
